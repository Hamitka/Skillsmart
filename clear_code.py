from my_secure import *
import pandas as pd
import pynetbox
import logging, coloredlogs
import time
import ipaddress

logger = logging.getLogger(__name__)
coloredlogs.install(fmt='%(asctime)s %(levelname)s: %(message)s', datefmt='%d.%m.%Y %H:%M:%S', logger=logger)

"""6.1. Разберите свой код, и сделайте пять примеров,
где можно более наглядно учесть в именах переменных уровни абстракции. """
# отметил ниже с комментарием # 6.1

"""6.2. Приведите четыре примера, где вы в качестве имён переменных использовали
или могли бы использовать технические термины из информатики. """
# отметил ниже с комментарием # 6.2

"""6.3. Придумайте или найдите в своём коде три примера,
когда имена переменных даны с учётом контекста (функции, метода, класса). """
# отметил ниже с комментарием # 6.3

"""6.4. Найдите пять имён переменных в своём коде, длины которых не укладываются в 8-20 символов,
и исправьте, чтобы они укладывались в данный диапазон."""
# не нашел таких


def time_track(func):
    def surrogate(*args, **kwargs):
        started_time = time.monotonic()

        result = func(*args, **kwargs)

        ended_time = time.monotonic()
        elapsed_time = round(ended_time - started_time, 4)
        print(f'Функция работала {elapsed_time} секунд(ы)')
        return result

    return surrogate


def gps_convert(degrees, minutes, seconds):
    return degrees + (minutes / 60) + (seconds / 3600)


def gps_convert_string(latitude: str, longitude: str):
    def gps_convert(degrees, minutes, seconds):
        return degrees + (minutes / 60) + (seconds / 3600)

    degrees_lat, minutes_lat, seconds_lat = map(int, latitude.split())  # 6.1
    degrees_long, minutes_long, seconds_long = map(int, longitude.split())  # 6.1
    latitude = gps_convert(degrees_lat, minutes_lat, seconds_lat)   # 6.1
    longitude = gps_convert(degrees_long, minutes_long, seconds_long)   # 6.1
    return round(latitude, 6), round(longitude, 6)


def timezone(some_str: str):
    """return timezone from name of region"""

    dict_timezone = {'Europe/Kaliningrad MSK−1 (UTC+2)': 'Калининградская область', # 6.1
                     'Europe/Moscow MSK (UTC+3)': 'Москва, Санкт-Петербург, Севастополь, Республика Адыгея, Республика '
                                                  'Дагестан, Республика Ингушетия, Кабардино-Балкарская Республика, Республика '
                                                  'Калмыкия, Республика Крым, Карачаево-Черкесская Республика, Республика '
                                                  'Карелия, Республика Коми, Республика Марий Эл, Республика Мордовия, '
                                                  'Республика Северная Осетия-Алания, Республика Татарстан, Чеченская '
                                                  'Республика, Чувашская Республика, Краснодарский край, Ставропольский край, '
                                                  'Архангельская область, Астраханская область, Белгородская область, '
                                                  'Брянская область, Владимирская область, Волгоградская область, Вологодская '
                                                  'область, Воронежская область, Ивановская область, Калужская область, '
                                                  'Кировская область, Костромская область, Курская область, Ленинградская '
                                                  'область, Липецкая область, Московская область, Мурманская область, '
                                                  'Нижегородская область, Новгородская область, Орловская область, Пензенская '
                                                  'область, Псковская область, Ростовская область, Рязанская область, '
                                                  'Саратовская область, Смоленская область, Тамбовская область, '
                                                  'Тверская область, Тульская область, Ульяновская область, Ярославская '
                                                  'область, Ненецкий автономный округ'.split(', '),
                     'Europe/Samara MSK+1 (UTC+4)': 'Самарская область, Республика Удмуртия'.split(', '),
                     'Asia/Yekaterinburg MSK+2 (UTC+5)': 'Республика Башкортостан, Пермский край, Курганская область, '
                                                         'Оренбургская область, Свердловская область, Тюменская область, '
                                                         'Челябинская область, Ханты-Мансийский автономный округ-Югра, '
                                                         'Ямало-Ненецкий автономный округ'.split(', '),
                     'Asia/Omsk MSK+3 (UTC+6)': 'Республика Алтай, Алтайский край, Новосибирская область, Омская область, '
                                                'Томская область'.split(', '),
                     'Asia/Krasnoyarsk MSK+4 (UTC+7)': 'Республика Тыва, Республика Хакасия, Красноярский край, '
                                                       'Кемеровская область'.split(', '),
                     'Asia/Irkutsk MSK+5 (UTC+8)': 'Республика Бурятия, Забайкальский край, Иркутская область'.split(
                         ', '),
                     'Asia/Yakutsk MSK+6 (UTC+9)': 'Республика Саха (Якутия), Амурская область'.split(', '),
                     'Asia/Vladivostok MSK+7 (UTC+10)': 'часть Республики Саха (Якутия), Приморский край, '
                                                        'Хабаровский край, Магаданская область, '
                                                        'Сахалинская область, '
                                                        'Еврейская автономная область'.split(', '),
                     'Asia/Srednekolymsk MSK+8 (UTC+11)': 'часть Республики Саха (Якутия), '
                                                          'Сахалинская область (только Северо-Курильский район)'.split(
                         ', '),
                     'Asia/Kamchatka MSK+9 (UTC+12)': 'Камчатский край, Чукотский автономный округ'.split(', ')}
    for time_zone, region_name in dict_timezone.items(): # 6.1
        if some_str in region_name:
            return time_zone.split()[0]
    return None


def transliteration_slug(some_str: str):
    dict_translit = {'rus': tuple('абвгдеёжзийклмнопрстуфхцчшщьыъэюя'),
                     'eng': ('a', 'b', 'v', 'g', 'd', 'e', 'e', 'zh', 'z', 'i', 'i', 'k', 'l', 'm',
                             'n', 'o', 'p', 'r', 's', 't', 'u', 'f', 'kh', 'c', 'ch', 'sh', 'sch',
                             '', 'yi', '', 'e', 'yu', 'ya')}

    for letter in some_str: # 6.3
        if letter.lower() in dict_translit['rus']:
            some_str = some_str.replace(letter, dict_translit['eng'][dict_translit['rus'].index(letter.lower())])
    return some_str.replace(', ', '_').replace(' ', '_').replace('/', '_').replace('(', '').replace(')', '').replace(
        '.', '').replace('*', '').replace('№', '').replace("\'", '').replace(',', '')


dict_rtrs = {'Алтайский край': 'Алтайский КРТПЦ',
             'Амурская область': 'Амурский ОРТПЦ',
             'Архангельская область': 'Архангельский ОРТПЦ',
             'Астраханская область': 'Астраханский ОРТПЦ',
             'Белгородская область': 'Белгородский ОРТПЦ',
             'Брянская область': 'Брянский ОРТПЦ',
             'Владимирская область': 'Владимирский ОРТПЦ',
             'Волгоградская область': 'Волгоградский ОРТПЦ',
             'Вологодская область': 'Вологодский ОРТПЦ',
             'Воронежская область': 'Воронежский ОРТПЦ',
             'Хабаровский край': 'Дальневосточный РЦ',
             'Забайкальский край': 'Забайкальский КРТПЦ',
             'Ивановская область': 'Ивановский ОРТПЦ',
             'Иркутская область': 'Иркутский ОРТПЦ',
             'Калининградская область': 'Калининградский ОРТПЦ',
             'Калужская область': 'Калужский ОРТПЦ',
             'Камчатский край': 'Камчатский КРТПЦ',
             'Кемеровская область': 'Кемеровский ОРТПЦ',
             'Кировская область': 'Кировский ОРТПЦ',
             'Костромская область': 'Костромской ОРТПЦ',
             'Краснодарский край': 'Краснодарский КРТПЦ',
             'Красноярский край': 'Красноярский КРТПЦ',
             'Курганская область': 'Курганский ОРТПЦ',
             'Курская область': 'Курский ОРТПЦ',
             'Липецкая область': 'Липецкий ОРТПЦ',
             'Магаданская область': 'Магаданский ОРТПЦ',
             'Московская область': 'Московский РЦ',
             'Мурманская область': 'Мурманский ОРТПЦ',
             'Нижегородская область': 'Нижегородский ОРТПЦ',
             'Новгородская область': 'Новгородский ОРТПЦ',
             'Омская область': 'Омский ОРТПЦ',
             'Оренбургская область': 'Оренбургский ОРТПЦ',
             'Орловская область': 'Орловский ОРТПЦ',
             'Пензенская область': 'Пензенский ОРТПЦ',
             'Пермский край': 'Пермский КРТПЦ',
             'Приморский край': 'Приморский КРТПЦ',
             'Псковская область': 'Псковский ОРТПЦ',
             'Ростовская область': 'Ростовский ОРТПЦ',
             'Еврейская автономная область': 'РТПЦ Еврейской автономной области',
             'Кабардино-Балкарская Республика': 'РТПЦ Кабардино-Балкарской Республики',
             'Карачаево-Черкесская Республика': 'РТПЦ Карачаево-Черкесской Республики',
             'Республика Адыгея': 'РТПЦ Республики Адыгея',
             'Республика Алтай': 'РТПЦ Республики Алтай',
             'Республика Башкортостан': 'РТПЦ Республики Башкортостан',
             'Республика Бурятия': 'РТПЦ Республики Бурятия',
             'Республика Дагестан': 'РТПЦ Республики Дагестан',
             'Республика Ингушетия': 'РТПЦ Республики Ингушетия',
             'Республика Калмыкия': 'РТПЦ Республики Калмыкия',
             'Республика Карелия': 'РТПЦ Республики Карелия',
             'Республика Коми': 'РТПЦ Республики Коми',
             'Республика Крым': 'РТПЦ Республики Крым',
             'Республика Марий Эл': 'РТПЦ Республики Марий Эл',
             'Республика Мордовия': 'РТПЦ Республики Мордовия',
             'Республика Саха (Якутия)': 'РТПЦ Республики Саха (Якутия)',
             'Республика Северная Осетия-Алания': 'РТПЦ Республики Северная Осетия - Алания',
             'Республика Татарстан': 'РТПЦ Республики Татарстан',
             'Республика Тыва': 'РТПЦ Республики Тыва',
             'Республика Хакасия': 'РТПЦ Республики Хакасия',
             'Чеченская Республика': 'РТПЦ Чеченской Республики',
             'Чувашская Республика': 'РТПЦ Чувашской Республики',
             'Рязанская область': 'Рязанский ОРТПЦ',
             'Самарская область': 'Самарский ОРТПЦ',
             'Санкт-Петербург': 'Санкт-Петербургский РЦ',
             'Саратовская область': 'Саратовский ОРТПЦ',
             'Сахалинская область': 'Сахалинский ОРТПЦ',
             'Свердловская область': 'Свердловский ОРТПЦ',
             'Новосибирская область': 'Сибирский РЦ',
             'Смоленская область': 'Смоленский ОРТПЦ',
             'Ставропольский край': 'Ставропольский КРТПЦ',
             'Тамбовская область': 'Тамбовский ОРТПЦ',
             'Тверская область': 'Тверской ОРТПЦ',
             'Томская область': 'Томский ОРТПЦ',
             'Тульская область': 'Тульский ОРТПЦ',
             'Республика Удмуртия': 'Удмуртский РРТПЦ',
             'Ульяновская область': 'Ульяновский ОРТПЦ',
             'Тюменская область': 'Урало-Сибирский РЦ',
             'Ханты-Мансийский автономный округ-Югра': 'Урало-Сибирский РЦ',
             'Челябинская область': 'Челябинский ОРТПЦ',
             'Ярославская область': 'Ярославский ОРТПЦ',
             'Ленинградская область': 'Санкт-Петербургский РЦ',
             'Москва': 'Московский РЦ',
             'Ненецкий автономный округ': 'Архангельский ОРТПЦ',
             'Чукотский автономный округ': 'Дальневосточный РЦ',
             'Ямало-Ненецкий автономный округ': 'Урало-Сибирский РЦ',
             'Севастополь': 'РТПЦ Республики Крым'}

dict_region_code = {'Алтайский край': 'ALT', # 6.3
                    'Амурская область': 'AMU',
                    'Архангельская область': 'ARK',
                    'Астраханская область': 'AST',
                    'Белгородская область': 'BEL',
                    'Брянская область': 'BRY',
                    'Владимирская область': 'VLA',
                    'Волгоградская область': 'VGG',
                    'Вологодская область': 'VLG',
                    'Воронежская область': 'VOR',
                    'Хабаровский край': 'KHA',
                    'Забайкальский край': 'ZAB',
                    'Ивановская область': 'IVA',
                    'Иркутская область': 'IRK',
                    'Калининградская область': 'KAG',
                    'Калужская область': 'KAL',
                    'Камчатский край': 'KAM',
                    'Кемеровская область': 'KEM',
                    'Кировская область': 'KIR',
                    'Костромская область': 'KOS',
                    'Краснодарский край': 'KRA',
                    'Красноярский край': 'KYA',
                    'Курганская область': 'KUG',
                    'Курская область': 'KUR',
                    'Липецкая область': 'LIP',
                    'Магаданская область': 'MAG',
                    'Московская область': 'MOS',
                    'Мурманская область': 'MUR',
                    'Нижегородская область': 'NIZ',
                    'Новгородская область': 'NGR',
                    'Омская область': 'OMS',
                    'Оренбургская область': 'ORE',
                    'Орловская область': 'ORL',
                    'Пензенская область': 'PNZ',
                    'Пермский край': 'PER',
                    'Приморский край': 'PRI',
                    'Псковская область': 'PSK',
                    'Ростовская область': 'ROS',
                    'Еврейская автономная область': 'JEW',
                    'Кабардино-Балкарская Республика': 'KAB',
                    'Карачаево-Черкесская Республика': 'KAO',
                    'Республика Адыгея': 'ADY',
                    'Республика Алтай': 'ALI',
                    'Республика Башкортостан': 'BAS',
                    'Республика Бурятия': 'BUR',
                    'Республика Дагестан': 'DAG',
                    'Республика Ингушетия': 'ING',
                    'Республика Калмыкия': 'KAI',
                    'Республика Карелия': 'KAR',
                    'Республика Коми': 'KOM',
                    'Республика Крым': 'KRM',
                    'Республика Марий Эл': 'MAR',
                    'Республика Мордовия': 'MOR',
                    'Республика Саха (Якутия)': 'SAH',
                    'Республика Северная Осетия-Алания': 'NOR',
                    'Республика Татарстан': 'TAT',
                    'Республика Тыва': 'TUV',
                    'Республика Хакасия': 'KHK',
                    'Чеченская Республика': 'CHA',
                    'Чувашская Республика': 'CHV',
                    'Рязанская область': 'RYA',
                    'Самарская область': 'SAM',
                    'Санкт-Петербург': 'SPB',
                    'Саратовская область': 'SAR',
                    'Сахалинская область': 'SAK',
                    'Свердловская область': 'SVE',
                    'Новосибирская область': 'NVS',
                    'Смоленская область': 'SMO',
                    'Ставропольский край': 'STA',
                    'Тамбовская область': 'TAM',
                    'Тверская область': 'TVE',
                    'Томская область': 'TOM',
                    'Тульская область': 'TUL',
                    'Республика Удмуртия': 'UDM',
                    'Ульяновская область': 'ULY',
                    'Тюменская область': 'TYU',
                    'Ханты-Мансийский автономный округ-Югра': 'KHM',
                    'Челябинская область': 'CHE',
                    'Ярославская область': 'YAR',
                    'Ленинградская область': 'LEN',
                    'Москва': 'MSK',
                    'Ненецкий автономный округ': 'NEN',
                    'Чукотский автономный округ': 'CHU',
                    'Ямало-Ненецкий автономный округ': 'YAN',
                    'Севастополь': 'SEV'}

file_name_2021 = r'\\rtrs.local\rtrs\RTRS\ДИТ\ЕИП\Сеть\netbox\IP_net_export.xlsm' # 6.2
data_frame_2021 = pd.read_excel(file_name_2021, sheet_name='all_AMS') # 6.2

nb_sites = list(nb.dcim.sites.all()) # 6.3
nb_sites_name = [i.name for i in nb_sites] # 6.3
nb_sites_facility = [i.facility for i in nb_sites] # 6.3
nb_regions = list(nb.dcim.regions.all()) # 6.3
dict_nb_regions = {i.name: i.id for i in nb_regions} # 6.3

nb_tenants = list(nb.tenancy.tenants.all()) # 6.3
dict_nb_tenants = {i.name: i.id for i in nb_tenants} # 6.3


def get_site_from_list(some_facility: str):
    if some_facility in nb_sites_facility:
        for site in nb_sites:
            if site.facility == some_facility:
                return site
    else:
        return None


def create_prefix_by_facility(some_prefix: str, some_facility: str): # 6.2
    target_site = get_site_from_list(some_facility)
    prefix_role_id = 4  # 6.2
    prefix_tags = [8]   # 6.2
    prefix_get = nb.ipam.prefixes.get(prefix=some_prefix)
    if target_site is not None and prefix_get is None:
        try:
            prefix = nb.ipam.prefixes.create(prefix=some_prefix,
                                             role=prefix_role_id,
                                             site=target_site.id,
                                             tenant=target_site.tenant.id,
                                             tags=prefix_tags)
            return prefix
        except Exception as error:
            logger.critical(
                f"some error with site {target_site} {some_prefix}: {error.__class__.__name__}, {error}")
    else:
        logger.warning(
            f"Perhaps site {target_site} is absent or prefix {some_prefix} is already present")


def fill_prefix_from_xlsx():
    file2021 = r'\\rtrs.local\rtrs\RTRS\ДИТ\ЕИП\Сеть\netbox\IP_net_export.xlsm'
    df_vsat = pd.read_excel(file2021, sheet_name='VSAT', dtype=str)
    df_vsat = df_vsat[df_vsat.object_ID.notnull()]
    for index, row in df_vsat.iterrows():
        target_site_id = row['object_ID']
        if target_site_id != 'nan':
            try:
                target_ip = ipaddress.ip_interface(row['IP'] + '/24')
                create_prefix_by_facility(str(target_ip.network), target_site_id)

            except Exception as error:
                logger.critical(
                    f"some error with row {row['IP']}: {error.__class__.__name__}, {error}")


# nb.dcim.sites.get(name=nb_sites[10]).update(dict(facility=108101001))

@time_track
def main():
    for index, row in data_frame_2021.iterrows():
        if row['Пункт установки'].isupper():
            some_site = row['Пункт установки'].title()
        else:
            some_site = row['Пункт установки']

        some_site_facility = str(row['Код объекта'])
        some_site_name = f'{some_site} ({some_site_facility})'
        some_site_slug = transliteration_slug(f"{some_site}_{str(row['Код объекта'])}")
        some_site_region_id = dict_nb_regions[row['Субъект РФ']]
        some_site_tenant_id = dict_nb_tenants[dict_rtrs[row['Субъект РФ']]]
        some_site_timezone = timezone(row['Субъект РФ'])
        some_site_physical_address = f"{row['Субъект РФ']}, {row['Район']}, {row['Пункт установки']}"
        some_site_latitude = round(gps_convert(row['Широта (WGS 84) градусы'],
                                               row['Широта минуты'],
                                               row['Широта секунды']), 6)
        some_site_longitude = round(gps_convert(row['Долгота (WGS 84) градусы'],
                                                row['Долгота минуты'],
                                                row['Долгота секунды']), 6)

        if some_site_facility not in nb_sites_facility:
            try:
                nb.dcim.sites.create(name=some_site_name,
                                     slug=some_site_slug,
                                     facility=some_site_facility,
                                     region=some_site_region_id,
                                     tenant=some_site_tenant_id,
                                     time_zone=some_site_timezone,
                                     physical_address=some_site_physical_address,
                                     latitude=some_site_latitude,
                                     longitude=some_site_longitude)
                logger.info(f'the site {some_site} ID: {some_site_facility} was created')

            except Exception as error:
                logger.critical(
                    f"some error with site {some_site} {some_site_facility}: {error.__class__.__name__}, {error}")
            # else:
            nb_site = nb.dcim.sites.get(facility=some_site_facility)


if __name__ == '__main__':
    main()
